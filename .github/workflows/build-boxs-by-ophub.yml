name: Build ImmortalWrt with OpenAppFilter
on:
  workflow_dispatch:
    inputs:
      openwrt_kernel:
        description: "选择构建的内核版本"
        required: false
        default: "6.1.y"
        type: choice
        options:
          - 5.4.y
          - 5.10.y
          - 5.15.y
          - 6.1.y
          - 6.6.y
          - 6.12.y
      openwrt_board:
        description: "选择设备型号"
        required: false
        default: "a311d-oes"
        type: choice
        # 此处省略大量设备型号选项，保持与原配置一致
      include_docker:
        description: "是否编译 Docker 插件"
        required: true
        default: 'no'
        type: choice
        options:
          - 'yes'
          - 'no'
      enable_store:
        description: "集成 store 商店"
        required: false
        type: boolean
        default: true
      skip_imagebuilder:
        description: "直接使用底包快速构建固件, 忽略自定义插件 ----（跳过 ImageBuilder）"
        required: false
        default: false
        type: boolean
      replace_banner:
        description: "替换为 ImmortalWrt 的 banner 信息"
        required: false
        default: false
        type: boolean
      rootfs_partsize:
        description: "软件包大小（1G 固定）"
        required: true
        default: "1024"
        type: choice
        options:
          - "1024"
      builder_name:
        description: "设置打包作者的名称"
        required: true
        default: "wukongdaily"

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 设置可执行权限
        run: chmod +x ${{ github.workspace }}/n1/build.sh

      - name: 调试工作区内容
        run: ls -R

      - name: 启用 Store 集成
        run: |
          if [ "${{ github.event.inputs.enable_store }}" == "true" ]; then
            echo 'CUSTOM_PACKAGES="$CUSTOM_PACKAGES luci-app-store"' >> shell/custom-packages.sh
            echo "✅ 已追加 luci-app-store"
          else
            echo "❎ 未启用 luci-app-store"
          fi

      - name: 处理 banner 信息替换
        if: ${{ github.event.inputs.skip_imagebuilder == 'false' && github.event.inputs.replace_banner == 'true' }}
        run: cp n1/99-banner.sh files/etc/uci-defaults/

      - name: 集成 OpenAppFilter 源码
        if: ${{ github.event.inputs.skip_imagebuilder != 'true' }}
        run: |
          echo "✅ 开始下载 OpenAppFilter 源码"
          mkdir -p ${{ github.workspace }}/package
          git clone https://github.com/destan19/OpenAppFilter.git ${{ github.workspace }}/package/OpenAppFilter
          echo "✅ 已下载 OpenAppFilter 源码"

      - name: 构建 Radxa 及其他板卡的根文件系统（ImmortalWrt）
        if: ${{ github.event.inputs.skip_imagebuilder != 'true' }}
        run: |
          echo "✅ 使用 ImageBuilder 构建 rootfs（含 OpenAppFilter）"
          profiles="generic"
          include_docker="${{ github.event.inputs.include_docker }}"
          rootfs_partsize="${{ github.event.inputs.rootfs_partsize }}"

          IFS=',' read -r -a profile_array <<< "$profiles"

          for profile in "${profile_array[@]}"; do
            echo "Building for profile: $profile"

            docker run --rm -i \
              --user root \
              -v "${{ github.workspace }}/bin:/home/build/immortalwrt/bin" \
              -v "${{ github.workspace }}/files/etc/uci-defaults:/home/build/immortalwrt/files/etc/uci-defaults" \
              -v "${{ github.workspace }}/arch/arch.conf:/home/build/immortalwrt/files/etc/opkg/arch.conf" \
              -v "${{ github.workspace }}/shell:/home/build/immortalwrt/shell" \
              -v "${{ github.workspace }}/n1/banner:/home/build/immortalwrt/files/mnt/banner" \
              -v "${{ github.workspace }}/n1/imm.config:/home/build/immortalwrt/.config" \
              -v "${{ github.workspace }}/n1/build.sh:/home/build/immortalwrt/build.sh" \
              -v "${{ github.workspace }}/package/OpenAppFilter:/home/build/immortalwrt/package/OpenAppFilter" \
              -e PROFILE=$profile \
              -e INCLUDE_DOCKER=$include_docker \
              -e ROOTFS_PARTSIZE=$rootfs_partsize \
              -e CONFIG_PACKAGE_luci-app-oaf=y \
              -e CONFIG_PACKAGE_open-app-filter=y \
              -e CONFIG_PACKAGE_oaf=y \
              -e CONFIG_PACKAGE_kmod-oaf=y \
              immortalwrt/imagebuilder:armsr-armv8-openwrt-24.10.2 /bin/bash -c "
                cd /home/build/immortalwrt && \
                make image V=s
              "
          done

      - name: 下载预构建的 rootfs.tar.gz
        if: ${{ github.event.inputs.skip_imagebuilder == 'true' }}
        run: |
          echo "📦 正在下载预构建 rootfs"
          mkdir -p bin/targets/armsr/armv8
          curl -L -o bin/targets/armsr/armv8/openwrt-armvirt-64-default-rootfs.tar.gz \
            https://github.com/wukongdaily/AutoBuildImmortalWrt/releases/download/rootfs/immortalwrt-24.10.2-armsr-armv8-generic-rootfs.tar.gz

      - name: 查找 rootfs.tar.gz 所在路径
        id: find_rootfs
        run: |
          ROOTFS_FILE=$(find bin/targets/armsr/armv8/ -type f -name "*rootfs.tar.gz" | head -n1)
          echo "✅ Found: $ROOTFS_FILE"
          if [ ! -f "$ROOTFS_FILE" ]; then
            echo "❌ 找不到 rootfs.tar.gz 文件"
            exit 1
          fi
          echo "file=$ROOTFS_FILE" >> $GITHUB_OUTPUT

      - name: 打包为 ophub 的 ImmortalWrt（armsr-armv8）
        uses: ophub/amlogic-s9xxx-openwrt@main
        id: package
        with:
          openwrt_path: ${{ steps.find_rootfs.outputs.file }}
          openwrt_board: ${{ inputs.openwrt_board }}
          openwrt_kernel: ${{ inputs.openwrt_kernel }}
          auto_kernel: true
          kernel_repo: "ophub/kernel"
          kernel_usage: flippy
          builder_name: ${{ inputs.builder_name }}

      - name: 调试ophub动作输出
        run: |
          echo "PACKAGED_OUTPUTPATH: ${{ steps.package.outputs.PACKAGED_OUTPUTPATH }}"
          echo "所有输出变量: ${{ toJSON(steps.package.outputs) }}"

      - name: 调试打包输出路径
        run: |
          echo "打包输出路径: ${{ steps.package.outputs.PACKAGED_OUTPUTPATH }}"
          if [ -d "${{ steps.package.outputs.PACKAGED_OUTPUTPATH }}" ]; then
            ls -l "${{ steps.package.outputs.PACKAGED_OUTPUTPATH }}"
          else
            echo "路径不存在，当前工作目录内容："
            ls -l
          fi

      - name: 重命名 .img.gz 文件
        id: rename
        run: |
          MODEL=${{ inputs.openwrt_board }}
          PACKAGED_OUTPUT_PATH=${{ steps.package.outputs.PACKAGED_OUTPUTPATH }}
          echo "当前设备型号: $MODEL"
          echo "打包输出路径: $PACKAGED_OUTPUT_PATH"
          
          # 检查路径是否存在
          if [ ! -d "$PACKAGED_OUTPUT_PATH" ]; then
            echo "错误：打包输出路径 $PACKAGED_OUTPUT_PATH 不存在，尝试默认路径"
            PACKAGED_OUTPUT_PATH="${{ github.workspace }}/output"
            echo "使用默认路径: $PACKAGED_OUTPUT_PATH"
            if [ ! -d "$PACKAGED_OUTPUT_PATH" ]; then
              echo "错误：默认路径 $PACKAGED_OUTPUT_PATH 也不存在"
              exit 1
            fi
          fi
          
          # 查找 .img.gz 文件
          IMG_FILE=$(find "$PACKAGED_OUTPUT_PATH" -type f -name "*.img.gz" | head -n1)
          if [ -z "$IMG_FILE" ]; then
            echo "错误：在 $PACKAGED_OUTPUT_PATH 中未找到 .img.gz 文件"
            exit 1
          fi
          
          FILENAME=$(basename "$IMG_FILE")
          KERNEL_VERSION=$(echo "$FILENAME" | grep -oP 'k\d+\.\d+\.\d+')
          if [[ -z "$KERNEL_VERSION" ]]; then
            KERNEL_VERSION="unknown"
            echo "警告：无法从文件名 $FILENAME 中提取内核版本，使用默认值 $KERNEL_VERSION"
          fi
          
          NEW_NAME="immortalwrt-24.10.2-$MODEL-btrfs-$KERNEL_VERSION.img.gz"
          mv "$IMG_FILE" "$PACKAGED_OUTPUT_PATH/$NEW_NAME"
          echo "重命名为: $NEW_NAME"

      - name: 上传固件和 OpenAppFilter 到 GitHub Releases
        uses: softprops/action-gh-release@v2.2.1
        with:
          tag_name: ophub
          name: ImmortalWrt for boxs (含 OpenAppFilter 插件)
          body: |
            ## 构建信息
            - 设备型号：${{ inputs.openwrt_board }}
            - 内核版本：${{ inputs.openwrt_kernel }}（系统自动适配）
            - 作者：${{ inputs.builder_name }}
            - 集成组件：Docker(${{ inputs.include_docker }})、Store(${{ inputs.enable_store }})、OpenAppFilter
          files: |
            ${{ steps.package.outputs.PACKAGED_OUTPUTPATH }}/*.img.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
