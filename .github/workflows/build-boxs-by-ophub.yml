name: Build and Upload OpenAppFilter IPK Files
on:
  workflow_dispatch:
    inputs:
      openwrt_version:
        description: "选择OpenWrt版本"
        required: true
        default: "23.05.3"
        type: choice
        options:
          - 21.02.7
          - 22.03.6
          - 23.05.3
          - snapshot
      openwrt_target:
        description: "选择目标架构"
        required: true
        default: "armsr/armv8"
        type: choice
        options:
          - armsr/armv8
          - x86/64
          - ramips/mt7621
          - bcm27xx/bcm2711
          - mediatek/mt7622
      builder_name:
        description: "设置打包作者的名称"
        required: true
        default: "openwrt-builder"

jobs:
  build_openappfilter:
    runs-on: ubuntu-22.04
    name: 编译OpenAppFilter并生成IPK文件
    steps:
      - name: 检查系统环境
        run: |
          echo "系统信息: $(uname -a)"
          echo "可用磁盘空间: $(df -h /)"

      - name: 安装编译依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential clang flex bison g++ gawk \
            gcc-multilib gettext git libncurses5-dev libssl-dev python3-distutils \
            rsync unzip zlib1g-dev file wget curl

      - name: 获取当前时间（用于版本命名）
        id: get_time
        run: echo "current_date=$(date +'%Y%m%d-%H%M')" >> $GITHUB_OUTPUT

      - name: 克隆OpenWrt源码
        id: clone_openwrt
        run: |
          OPENWRT_VERSION=${{ github.event.inputs.openwrt_version }}
          if [ "$OPENWRT_VERSION" = "snapshot" ]; then
            git clone https://github.com/openwrt/openwrt.git openwrt
          else
            git clone -b v$OPENWRT_VERSION https://github.com/openwrt/openwrt.git openwrt
          fi
          cd openwrt
          echo "OPENWRT_COMMIT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "openwrt_dir=$(pwd)" >> $GITHUB_OUTPUT

      - name: 更新 feeds 并安装依赖
        run: |
          cd ${{ steps.clone_openwrt.outputs.openwrt_dir }}
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: 集成OpenAppFilter源码
        run: |
          cd ${{ steps.clone_openwrt.outputs.openwrt_dir }}
          echo "✅ 克隆OpenAppFilter源码"
          git clone https://github.com/destan19/OpenAppFilter.git package/OpenAppFilter
          
          # 检查源码是否克隆成功
          if [ ! -d "package/OpenAppFilter" ]; then
            echo "❌ 克隆OpenAppFilter失败"
            exit 1
          fi
          
          echo "✅ OpenAppFilter源码结构:"
          ls -la package/OpenAppFilter

      - name: 配置编译选项（仅编译OpenAppFilter）
        run: |
          cd ${{ steps.clone_openwrt.outputs.openwrt_dir }}
          
          # 加载目标架构默认配置
          TARGET=${{ github.event.inputs.openwrt_target }}
          echo "配置目标架构: $TARGET"
          echo "$TARGET" > .target
          ./scripts/target-metadata.pl < .target | ./scripts/kconfig.pl > .config
          
          # 启用必要的内核选项
          echo "CONFIG_NETFILTER=y" >> .config
          echo "CONFIG_NETFILTER_NETLINK=y" >> .config
          echo "CONFIG_IP6_NF_IPTABLES=y" >> .config
          echo "CONFIG_IP_NF_IPTABLES=y" >> .config
          
          # 配置OpenAppFilter为模块编译（确保生成IPK）
          echo "CONFIG_PACKAGE_luci-app-oaf=m" >> .config
          echo "CONFIG_PACKAGE_open-app-filter=m" >> .config
          echo "CONFIG_PACKAGE_oaf=m" >> .config
          echo "CONFIG_PACKAGE_kmod-oaf=m" >> .config
          
          # 保存配置
          make defconfig
          
          # 显示配置摘要
          echo "✅ 编译配置摘要:"
          grep "CONFIG_PACKAGE_.*oaf" .config

      - name: 单独编译OpenAppFilter
        id: compile_oaf
        run: |
          cd ${{ steps.clone_openwrt.outputs.openwrt_dir }}
          
          # 开始编译，启用多线程加速
          echo "✅ 开始编译OpenAppFilter..."
          make package/OpenAppFilter/compile V=s -j$(nproc)
          
          # 创建IPK收集目录
          mkdir -p ${{ github.workspace }}/oaf-ipk
          
          # 查找并收集所有相关IPK文件
          echo "✅ 查找生成的IPK文件..."
          find bin/ -name "*oaf*.ipk" -exec cp {} ${{ github.workspace }}/oaf-ipk/ \;
          find bin/ -name "*open-app-filter*.ipk" -exec cp {} ${{ github.workspace }}/oaf-ipk/ \;
          
          # 检查是否生成了IPK文件
          IPK_COUNT=$(ls -1 ${{ github.workspace }}/oaf-ipk/*.ipk 2>/dev/null | wc -l)
          if [ $IPK_COUNT -eq 0 ]; then
            echo "❌ 未生成任何OpenAppFilter IPK文件"
            exit 1
          else
            echo "✅ 成功生成 $IPK_COUNT 个IPK文件"
            echo "ipk_count=$IPK_COUNT" >> $GITHUB_OUTPUT
            echo "ipk_dir=${{ github.workspace }}/oaf-ipk" >> $GITHUB_OUTPUT
          fi
          
          # 显示生成的文件列表
          echo "✅ 生成的IPK文件列表:"
          ls -la ${{ github.workspace }}/oaf-ipk/

      - name: 生成IPK文件信息
        run: |
          # 创建文件信息清单
          echo "OpenAppFilter IPK Files (Build: ${{ steps.get_time.outputs.current_date }})" > ${{ steps.compile_oaf.outputs.ipk_dir }}/README.txt
          echo "OpenWrt Version: ${{ github.event.inputs.openwrt_version }}" >> ${{ steps.compile_oaf.outputs.ipk_dir }}/README.txt
          echo "Target Architecture: ${{ github.event.inputs.openwrt_target }}" >> ${{ steps.compile_oaf.outputs.ipk_dir }}/README.txt
          echo "OpenWrt Commit: ${{ env.OPENWRT_COMMIT }}" >> ${{ steps.compile_oaf.outputs.ipk_dir }}/README.txt
          echo "Files generated: ${{ steps.compile_oaf.outputs.ipk_count }}" >> ${{ steps.compile_oaf.outputs.ipk_dir }}/README.txt
          echo "" >> ${{ steps.compile_oaf.outputs.ipk_dir }}/README.txt
          echo "File list:" >> ${{ steps.compile_oaf.outputs.ipk_dir }}/README.txt
          ls -1 ${{ steps.compile_oaf.outputs.ipk_dir }}/*.ipk >> ${{ steps.compile_oaf.outputs.ipk_dir }}/README.txt
          
          # 显示清单内容
          echo "✅ IPK文件信息清单:"
          cat ${{ steps.compile_oaf.outputs.ipk_dir }}/README.txt

      - name: 上传IPK文件到GitHub Releases
        uses: softprops/action-gh-release@v2.2.1
        with:
          tag_name: oaf-build-${{ steps.get_time.outputs.current_date }}
          name: OpenAppFilter IPK (${{ steps.get_time.outputs.current_date }})
          body: |
            ## OpenAppFilter IPK 构建结果
            - 构建时间: ${{ steps.get_time.outputs.current_date }}
            - OpenWrt版本: ${{ github.event.inputs.openwrt_version }}
            - 目标架构: ${{ github.event.inputs.openwrt_target }}
            - 生成文件数量: ${{ steps.compile_oaf.outputs.ipk_count }}
            - OpenWrt源码Commit: ${{ env.OPENWRT_COMMIT }}
            
            这些IPK文件可直接通过OpenWrt的opkg命令安装
          files: |
            ${{ steps.compile_oaf.outputs.ipk_dir }}/*.ipk
            ${{ steps.compile_oaf.outputs.ipk_dir }}/README.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 构建总结
        if: always()
        run: |
          echo "## 构建总结"
          echo "- 构建状态: ${{ job.status }}"
          echo "- 构建时间: ${{ steps.get_time.outputs.current_date }}"
          echo "- 生成IPK数量: ${{ steps.compile_oaf.outputs.ipk_count || 0 }}"
          if [ "${{ steps.compile_oaf.outputs.ipk_count || 0 }}" -gt 0 ]; then
            echo "- IPK文件位置: ${{ steps.compile_oaf.outputs.ipk_dir }}"
            echo "- 可在Releases中下载生成的IPK文件"
          fi
    
