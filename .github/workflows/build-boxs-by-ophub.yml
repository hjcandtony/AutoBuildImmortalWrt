name: Build ImmortalWrt with Multi-Models
on:
  workflow_dispatch:
    inputs:
      openwrt_kernel:
        description: "选择内核版本"
        required: true
        default: "6.1.y"
        type: choice
        options:
          - 5.4.y
          - 5.10.y
          - 5.15.y
          - 6.1.y
          - 6.6.y
          - 6.12.y
      openwrt_board:
        description: "选择设备型号"
        required: true
        default: "fine3399"
        type: choice
        options:
          - fine3399
          - a311d
          - a311d-oes
          - s922x-oes-plus
          - rk3399-firefly
          - rock5b
          - nanopi-r5s
          - orangepi-5-plus
          - s905x3-hk1
          - tanix-tx6
      include_docker:
        description: "是否包含Docker"
        required: true
        default: 'no'
        type: choice
        options:
          - 'yes'
          - 'no'
      builder_name:
        description: "构建者名称"
        required: true
        default: "wukongdaily"

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 环境准备
        run: |
          chmod +x ${{ github.workspace }}/n1/build.sh
          mkdir -p ${{ github.workspace }}/package
          mkdir -p ${{ github.workspace }}/bin

      - name: 集成OpenAppFilter插件
        run: |
          git clone https://github.com/destan19/OpenAppFilter.git ${{ github.workspace }}/package/OpenAppFilter

      - name: 获取设备配置文件映射关系
        id: device_profile
        run: |
          # 定义设备到配置文件的映射关系（关键修复点）
          declare -A profile_map=(
            ["fine3399"]="rockchip/fine3399"
            ["a311d"]="amlogic/a311d"
            ["a311d-oes"]="amlogic/a311d-oes"
            ["s922x-oes-plus"]="amlogic/s922x-oes-plus"
            ["rk3399-firefly"]="rockchip/rk3399-firefly"
            ["rock5b"]="rockchip/rock5b"
            ["nanopi-r5s"]="rockchip/nanopi-r5s"
            ["orangepi-5-plus"]="rockchip/orangepi-5-plus"
            ["s905x3-hk1"]="amlogic/s905x3-hk1"
            ["tanix-tx6"]="amlogic/tanix-tx6"
          )
          
          # 获取当前选择的设备配置
          SELECTED_BOARD="${{ github.event.inputs.openwrt_board }}"
          echo "Selected board: $SELECTED_BOARD"
          
          # 输出映射的配置文件路径
          echo "profile=${profile_map[$SELECTED_BOARD]}" >> $GITHUB_OUTPUT

      - name: 检查设备配置是否存在
        run: |
          docker run --rm -i \
            --user root \
            -v "${{ github.workspace }}:/home/build/immortalwrt" \
            immortalwrt/imagebuilder:armsr-armv8-openwrt-24.10.2 /bin/bash -c "
              cd /home/build/immortalwrt && \
              echo '检查支持的设备配置...' && \
              make info | grep '${{ steps.device_profile.outputs.profile }}' && \
              if [ $? -ne 0 ]; then
                echo '错误: 设备配置 ${{ steps.device_profile.outputs.profile }} 不存在' && \
                echo '支持的配置列表:' && \
                make info | grep '^Target' && \
                exit 1
              fi
            "

      - name: 构建固件（含OpenAppFilter）
        run: |
          echo "构建 ${{ github.event.inputs.openwrt_board }} 固件，配置文件: ${{ steps.device_profile.outputs.profile }}"
          
          docker run --rm -i \
            --user root \
            -v "${{ github.workspace }}/bin:/home/build/immortalwrt/bin" \
            -v "${{ github.workspace }}/files:/home/build/immortalwrt/files" \
            -v "${{ github.workspace }}/package:/home/build/immortalwrt/package" \
            -v "${{ github.workspace }}/n1:/home/build/immortalwrt/n1" \
            -e PROFILE="${{ steps.device_profile.outputs.profile }}" \
            -e INCLUDE_DOCKER="${{ github.event.inputs.include_docker }}" \
            -e CONFIG_PACKAGE_luci-app-oaf=y \
            -e CONFIG_PACKAGE_open-app-filter=y \
            -e CONFIG_PACKAGE_oaf=y \
            -e CONFIG_PACKAGE_kmod-oaf=y \
            immortalwrt/imagebuilder:armsr-armv8-openwrt-24.10.2 /bin/bash -c "
              cd /home/build/immortalwrt && \
              make image V=s
            "

      - name: 查找构建结果
        id: find_output
        run: |
          OUTPUT_FILE=$(find ${{ github.workspace }}/bin -name "*.img.gz" | head -n1)
          if [ -z "$OUTPUT_FILE" ]; then
            echo "错误: 未找到构建的固件文件"
            exit 1
          fi
          echo "file=$OUTPUT_FILE" >> $GITHUB_OUTPUT
          echo "找到固件: $OUTPUT_FILE"

      - name: 重命名固件
        run: |
          MODEL="${{ github.event.inputs.openwrt_board }}"
          KERNEL="${{ github.event.inputs.openwrt_kernel }}"
          TIMESTAMP=$(date +%Y%m%d)
          mv "${{ steps.find_output.outputs.file }}" "${{ github.workspace }}/bin/immortalwrt-${MODEL}-${KERNEL}-${TIMESTAMP}.img.gz"

      - name: 上传到Releases
        uses: softprops/action-gh-release@v2
        with:
          tag_name: build-${{ github.event.inputs.openwrt_board }}-${{ github.sha }}
          name: ${{ github.event.inputs.openwrt_board }} 固件 (${{ github.event.inputs.openwrt_kernel }})
          files: ${{ github.workspace }}/bin/*.img.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
