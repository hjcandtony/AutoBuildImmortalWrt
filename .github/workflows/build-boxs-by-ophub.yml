name: Build ImmortalWrt with OpenAppFilter
on:
  workflow_dispatch:
    inputs:
      openwrt_kernel:
        description: "选择构建的内核版本"
        required: false
        default: "6.1.y"
        type: choice
        options:
          - 5.4.y
          - 5.10.y
          - 5.15.y
          - 6.1.y
          - 6.6.y
          - 6.12.y
      openwrt_board:
        description: "选择设备型号"
        required: false
        default: "a311d-oes"
        type: choice
        options:
          - a311d
          - a311d-oes
          - s922x-oes-plus
          - wxy-oect
          - wxy-oect-replaced
          - panther-x2
          - jp-tvbox
          - s905x3-hk1
          - tanix-tx6
          - s905l-b860av21u
          - s905l2-e900v21e
          - s905l
          - s905l-aurora-1s
          - s905l-mg101
          - s905l2
          - s905l2-wojia
          - s905l3
          - s905l3-cm211
          - s905l3-unt400g1
          - s905l3-unt402a
          - s905l3a
          - s905l3a-cm311
          - s905l3a-m401a
          - s905l3b
          - s905l3b-e900v21d
          - s905l3b-e900v22d
          - s905l3b-e900v22e
          - s905l3b-ip103h
          - s905l3b-rg020et-ca
          - s905l3b-unt403a
          - s905lb-ipbs9505
          - s905lb-q96-mini
          - s905lb-r3300l
          - r66s
          - r68s
          - nanopc-t6
          - nanopi-r5c
          - nanopi-r5s
          - orangepi-5-plus
          - orangepi-5b
          - alark35-3500
          - anas3035
          - beikeyun
          - chainedbox
          - crrc
          - dc-a588
          - dg3399
          - dg-tn3568
          - dlfr100
          - e20c
          - e25
          - eaidk-610
          - emb3531
          - fine3399
          - firefly-rk3399
          - fmx1-pro
          - h28k
          - h66k
          - h68k
          - h69k
          - h88k
          - h88k-v3
          - h96-max-m2
          - hs530r
          - hugsun-x99
          - ipc-r
          - king3399
          - kylin3399
          - lckfb-tspi
          - leez
          - lx-r3s
          - mrkaio-m68s
          - renegade-rk3328
          - rk3318-box
          - rock5b
          - rock5c
          - ruisen-box
          - s905
          - s905-beelink-mini
          - s905-mxqpro-plus
          - s905d-ki-pro
          - s905d-sml5442tw
          - s905mb
          - s905w
          - s905w-w95
          - s905w-x96-mini
          - s905w-x96w
          - s905x
          - s905x-b860h
          - s905x-nexbox-a95x
          - s905x-t95
          - s905x-tbee
          - s905x-tx9
          - s905x2
          - s905x2-km3
          - s905x2-x96max-2g
          - s905x3
          - s905x3-2101
          - s905x3-a100
          - s905x3-a95xf3
          - s905x3-a95xf3-gb
          - s905x3-b
          - s905x3-h96max
          - s905x3-ip1001m
          - s905x3-q1
          - s905x3-q2
          - s905x3-tx3
          - s905x3-tx3-bz
          - s905x3-ugoosx3
          - s905x3-whale
          - s905x3-x88-pro-x3
          - s905x3-x96air
          - s905x3-x96air-gb
          - s905x3-x96max
          - s905x2-hg680fj
          - s912
          - s912-h96pro-plus
          - s912-m8s-pro
          - s912-nexbox-a1
          - s912-nexbox-a2
          - s912-onecloudpro
          - s912-phicomm-t1
          - s912-t95z-plus
          - s912-tx8-max
          - s912-tx9-pro-2g
          - s912-tx9-pro-3g
          - s912-x92
          - s912-zyxq-fake
          - s922x
          - s922x-ct2000
          - s922x-gtking
          - s922x-gtkingpro-h
          - s922x-odroid-n2
          - s922x-reva
          - s922x-ugoos-am6
          - seewo-sv21
          - smart-am40
          - smart-am60
          - station-m1
          - station-m2
          - sv-33a6x
          - swan1-w28
          - sw799
          - tb-ls3399
          - tn3399
          - tpm312
          - tqc-a01
          - tvi3315a
          - vplus
          - xiaobao
          - yskj
          - zcube1-max
          - zk-r39a
          - zysj
      include_docker:
        description: "是否编译 Docker 插件"
        required: true
        default: 'no'
        type: choice
        options:
          - 'yes'
          - 'no'
      enable_store:
        description: "集成 store 商店"
        required: false
        type: boolean
        default: true
      skip_imagebuilder:
        description: "直接使用底包快速构建固件, 忽略自定义插件 ----（跳过 ImageBuilder）"
        required: false
        default: false
        type: boolean
      replace_banner:
        description: "替换为 ImmortalWrt 的 banner 信息"
        required: false
        default: false
        type: boolean
      rootfs_partsize:
        description: "软件包大小（1G 固定）"
        required: true
        default: "1024"
        type: choice
        options:
          - "1024"
      builder_name:
        description: "设置打包作者的名称"
        required: true
        default: "wukongdaily"

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 设置可执行权限
        run: chmod +x ${{ github.workspace }}/n1/build.sh

      - name: 调试工作区内容（初始）
        run: ls -R

      - name: 启用 Store 集成
        run: |
          if [ "${{ github.event.inputs.enable_store }}" == "true" ]; then
            echo 'CUSTOM_PACKAGES="$CUSTOM_PACKAGES luci-app-store"' >> shell/custom-packages.sh
            echo "✅ 已追加 luci-app-store"
          else
            echo "❎ 未启用 luci-app-store"
          fi

      - name: 处理 banner 信息替换
        if: ${{ github.event.inputs.skip_imagebuilder == 'false' && github.event.inputs.replace_banner == 'true' }}
        run: cp n1/99-banner.sh files/etc/uci-defaults/

      - name: 集成 OpenAppFilter 源码
        if: ${{ github.event.inputs.skip_imagebuilder != 'true' }}
        run: |
          echo "✅ 开始下载 OpenAppFilter 源码"
          mkdir -p ${{ github.workspace }}/package
          git clone https://github.com/destan19/OpenAppFilter.git ${{ github.workspace }}/package/OpenAppFilter
          echo "✅ 已下载 OpenAppFilter 源码"

      - name: 构建 Radxa 及其他板卡的根文件系统（ImmortalWrt）
        if: ${{ github.event.inputs.skip_imagebuilder != 'true' }}
        run: |
          echo "✅ 使用 ImageBuilder 构建 rootfs（含 OpenAppFilter）"
          profiles="generic"
          include_docker="${{ github.event.inputs.include_docker }}"
          rootfs_partsize="${{ github.event.inputs.rootfs_partsize }}"

          IFS=',' read -r -a profile_array <<< "$profiles"

          for profile in "${profile_array[@]}"; do
            echo "Building for profile: $profile"

            docker run --rm -i \
              --user root \
              -v "${{ github.workspace }}/bin:/home/build/immortalwrt/bin" \
              -v "${{ github.workspace }}/files/etc/uci-defaults:/home/build/immortalwrt/files/etc/uci-defaults" \
              -v "${{ github.workspace }}/arch/arch.conf:/home/build/immortalwrt/files/etc/opkg/arch.conf" \
              -v "${{ github.workspace }}/shell:/home/build/immortalwrt/shell" \
              -v "${{ github.workspace }}/n1/banner:/home/build/immortalwrt/files/mnt/banner" \
              -v "${{ github.workspace }}/n1/imm.config:/home/build/immortalwrt/.config" \
              -v "${{ github.workspace }}/n1/build.sh:/home/build/immortalwrt/build.sh" \
              -v "${{ github.workspace }}/package/OpenAppFilter:/home/build/immortalwrt/package/OpenAppFilter" \
              -e PROFILE=$profile \
              -e INCLUDE_DOCKER=$include_docker \
              -e ROOTFS_PARTSIZE=$rootfs_partsize \
              -e CONFIG_PACKAGE_luci-app-oaf=y \
              -e CONFIG_PACKAGE_open-app-filter=y \
              -e CONFIG_PACKAGE_oaf=y \
              -e CONFIG_PACKAGE_kmod-oaf=y \
              immortalwrt/imagebuilder:armsr-armv8-openwrt-24.10.2 /bin/bash -c "
                cd /home/build/immortalwrt && \
                make image V=s
              "
          done

      - name: 下载预构建的 rootfs.tar.gz
        if: ${{ github.event.inputs.skip_imagebuilder == 'true' }}
        run: |
          echo "📦 正在下载预构建 rootfs"
          mkdir -p bin/targets/armsr/armv8
          curl -L -o bin/targets/armsr/armv8/openwrt-armvirt-64-default-rootfs.tar.gz \
            https://github.com/wukongdaily/AutoBuildImmortalWrt/releases/download/rootfs/immortalwrt-24.10.2-armsr-armv8-generic-rootfs.tar.gz

      - name: 查找 rootfs.tar.gz 所在路径
        id: find_rootfs
        run: |
          ROOTFS_FILE=$(find bin/targets/armsr/armv8/ -type f -name "*rootfs.tar.gz" | head -n1)
          echo "✅ Found: $ROOTFS_FILE"
          if [ ! -f "$ROOTFS_FILE" ]; then
            echo "❌ 找不到 rootfs.tar.gz 文件"
            exit 1
          fi
          echo "file=$ROOTFS_FILE" >> $GITHUB_OUTPUT

      - name: 打包为 ophub 的 ImmortalWrt（armsr-armv8）
        uses: ophub/amlogic-s9xxx-openwrt@main
        id: package
        with:
          openwrt_path: ${{ steps.find_rootfs.outputs.file }}
          openwrt_board: ${{ inputs.openwrt_board }}
          openwrt_kernel: ${{ inputs.openwrt_kernel }}
          auto_kernel: true
          kernel_repo: "ophub/kernel"
          kernel_usage: flippy
          builder_name: ${{ inputs.builder_name }}

      - name: 调试ophub动作输出
        run: |
          echo "PACKAGED_OUTPUTPATH: ${{ steps.package.outputs.PACKAGED_OUTPUTPATH }}"
          echo "所有输出变量: ${{ toJSON(steps.package.outputs) }}"

      - name: 调试打包输出路径（详细）
        run: |
          echo "打包输出路径: ${{ steps.package.outputs.PACKAGED_OUTPUTPATH }}"
          if [ -d "${{ steps.package.outputs.PACKAGED_OUTPUTPATH }}" ]; then
            echo "路径存在，内容如下："
            ls -l "${{ steps.package.outputs.PACKAGED_OUTPUTPATH }}"
          else
            echo "路径不存在，当前工作目录内容："
            ls -l
            echo "当前工作目录路径：$(pwd)"
          fi

      - name: 重命名 .img.gz 文件（增强容错）
        id: rename
        run: |
          MODEL=${{ inputs.openwrt_board }}
          PACKAGED_OUTPUT_PATH=${{ steps.package.outputs.PACKAGED_OUTPUTPATH }}
          echo "当前设备型号: $MODEL"
          echo "打包输出路径: $PACKAGED_OUTPUT_PATH"
          
          # 检查 ophub 动作输出的路径是否存在
          if [ ! -d "$PACKAGED_OUTPUT_PATH" ]; then
            echo "警告：打包输出路径 $PACKAGED_OUTPUT_PATH 不存在，尝试查找可能的输出目录"
            # 尝试从常见输出位置查找 .img.gz 文件
            POTENTIAL_DIRS=("${{ github.workspace }}/output" "${{ github.workspace }}/bin" "${{ github.workspace }}")
            FOUND_IMG=false
            for dir in "${POTENTIAL_DIRS[@]}"; do
              echo "检查目录: $dir"
              IMG_FILE=$(find "$dir" -type f -name "*.img.gz" | head -n1)
              if [ -n "$IMG_FILE" ]; then
                echo "在 $dir 中找到 .img.gz 文件: $IMG_FILE"
                PACKAGED_OUTPUT_PATH=$(dirname "$IMG_FILE")
                FOUND_IMG=true
                break
              fi
            done
            if [ "$FOUND_IMG" = "false" ]; then
              echo "错误：所有潜在目录中均未找到 .img.gz 文件"
              exit 1
            fi
          fi
          
          # 查找 .img.gz 文件
          IMG_FILE=$(find "$PACKAGED_OUTPUT_PATH" -type f -name "*.img.gz" | head -n1)
          if [ -z "$IMG_FILE" ]; then
            echo "错误：在 $PACKAGED_OUTPUT_PATH 中未找到 .img.gz 文件"
            exit 1
          fi
          
          FILENAME=$(basename "$IMG_FILE")
          KERNEL_VERSION=$(echo "$FILENAME" | grep -oP 'k\d+\.\d+\.\d+')
          if [[ -z "$KERNEL_VERSION" ]]; then
            KERNEL_VERSION="unknown"
            echo "警告：无法从文件名 $FILENAME 中提取内核版本，使用默认值
